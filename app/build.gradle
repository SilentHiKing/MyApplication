apply plugin: 'com.android.application'


android {
    compileSdkVersion build_versions.COMPLIE

    defaultConfig {
        applicationId APP_PACKAGE_NAME
        minSdkVersion build_versions.MIN_SDK
        targetSdkVersion build_versions.TARGET_SDK
        versionCode app_version.VERSION_CODE
        versionName app_version.VERISON_NAME
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString(),
                             AROUTER_MODULE_NAME  : project.getName()
                ]
            }
        }

    }
    lintOptions {

        abortOnError false

    }

    buildTypes {
        release {
            multiDexKeepFile file('multidex-config.txt')
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            multiDexKeepFile file('multidex-config.txt')
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi-v7a', 'x86_64'
            universalApk true
        }
    }
    configurations.all {

        Configuration configuration ->
            configuration.resolutionStrategy.force([

            ])
    }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation deps.support.recyclerview
    implementation deps.support.constraint
    implementation deps.support.tv_provider


    implementation deps.butterknife.implementation
    annotationProcessor deps.butterknife.compiler

    implementation deps.arch.room_runtime
    annotationProcessor deps.arch.room_compiler

    implementation deps.arouter.api
    annotationProcessor deps.arouter.compiler


    implementation project(path: ':common')
    implementation project(path: ':compiler')
    implementation project(path: ':annotation')


    /*compileOnly   'org.projectlombok:lombok:1.18.6'//添加lombok依赖
    annotationProcessor 'org.projectlombok:lombok:1.18.6'*/


}
/*
def generatedSrcRoot = file("${buildDir}/generated/sources/annotationProcessor/java")

task deleteGeneratedSources(type: Delete) {
    delete generatedSrcRoot
}

tasks.withType(JavaCompile) { it.dependsOn('deleteGeneratedSources') }*/
